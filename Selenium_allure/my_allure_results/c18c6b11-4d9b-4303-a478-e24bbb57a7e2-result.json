{"name": "test_products_group", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://test.qa.studio?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (708, 694). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\n  (Session info: chrome=106.0.5249.119)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00661ED3+2236115]\n\tOrdinal0 [0x005F92F1+1807089]\n\tOrdinal0 [0x005066FD+812797]\n\tOrdinal0 [0x0053BEC7+1031879]\n\tOrdinal0 [0x00539E6C+1023596]\n\tOrdinal0 [0x00537A5B+1014363]\n\tOrdinal0 [0x005366E7+1009383]\n\tOrdinal0 [0x0052C416+967702]\n\tOrdinal0 [0x00551A8C+1120908]\n\tOrdinal0 [0x0052BD84+966020]\n\tOrdinal0 [0x00551CA4+1121444]\n\tOrdinal0 [0x005659E2+1202658]\n\tOrdinal0 [0x005518A6+1120422]\n\tOrdinal0 [0x0052A73D+960317]\n\tOrdinal0 [0x0052B71F+964383]\n\tGetHandleVerifier [0x0090E7E2+2743074]\n\tGetHandleVerifier [0x009008D4+2685972]\n\tGetHandleVerifier [0x006F2BAA+532202]\n\tGetHandleVerifier [0x006F1990+527568]\n\tOrdinal0 [0x0060080C+1837068]\n\tOrdinal0 [0x00604CD8+1854680]\n\tOrdinal0 [0x00604DC5+1854917]\n\tOrdinal0 [0x0060ED64+1895780]\n\tBaseThreadInitThunk [0x7748FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77817BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77817B8E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6af1497e2e34ec43b8b85444dbda9c68\")>\n\n    @pytest.mark.xfail(reason=\"Wait for fix bug\")\n    def test_products_group(browser):\n        \"\"\"\n        Test case TC-2\n        \"\"\"\n        expected_menu = [\n            (\"Все\", \"\", \"[class='tab-all active']\"),\n            (\"Бестселлеры\", \"/?products_group=best_sellers\", \"[class='tab-best_sellers ']\"),\n            (\"Горячие товары\", \"/?products_group=featured\", \"[class='tab-featured ']\"),\n            (\"Новые товары\", \"/?products_group=new\", \"[class='tab-new ']\"),\n            (\"Распродажа товаров\", \"/?products_group=sale\", \"[class='tab-sale ']\")\n        ]\n    \n        browser.get(URL)\n        menu_element = \"[class='catalog-toolbar-tabs__content'] a\"\n        elements = browser.find_elements(by=By.CSS_SELECTOR, value=menu_element)\n        assert len(elements) == len(expected_menu), \"Unexpected number of products group\"\n    \n        for item in expected_menu:\n            element = browser.find_element(by=By.CSS_SELECTOR, value=item[2])\n>           element.click()\n\ntests\\test_shop.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000214E2CA6920>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77817BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77817B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://test.qa.studio?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (708, 694). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\nE         (Session info: chrome=106.0.5249.119)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00661ED3+2236115]\nE       \tOrdinal0 [0x005F92F1+1807089]\nE       \tOrdinal0 [0x005066FD+812797]\nE       \tOrdinal0 [0x0053BEC7+1031879]\nE       \tOrdinal0 [0x00539E6C+1023596]\nE       \tOrdinal0 [0x00537A5B+1014363]\nE       \tOrdinal0 [0x005366E7+1009383]\nE       \tOrdinal0 [0x0052C416+967702]\nE       \tOrdinal0 [0x00551A8C+1120908]\nE       \tOrdinal0 [0x0052BD84+966020]\nE       \tOrdinal0 [0x00551CA4+1121444]\nE       \tOrdinal0 [0x005659E2+1202658]\nE       \tOrdinal0 [0x005518A6+1120422]\nE       \tOrdinal0 [0x0052A73D+960317]\nE       \tOrdinal0 [0x0052B71F+964383]\nE       \tGetHandleVerifier [0x0090E7E2+2743074]\nE       \tGetHandleVerifier [0x009008D4+2685972]\nE       \tGetHandleVerifier [0x006F2BAA+532202]\nE       \tGetHandleVerifier [0x006F1990+527568]\nE       \tOrdinal0 [0x0060080C+1837068]\nE       \tOrdinal0 [0x00604CD8+1854680]\nE       \tOrdinal0 [0x00604DC5+1854917]\nE       \tOrdinal0 [0x0060ED64+1895780]\nE       \tBaseThreadInitThunk [0x7748FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77817BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77817B8E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException"}, "description": "\n    Test case TC-2\n    ", "start": 1666805266197, "stop": 1666805269737, "uuid": "0497146f-f59f-4b48-8e53-6b29f56eb5e4", "historyId": "09ac6b905e7ac66417c95d86a058a7ca", "testCaseId": "4fdd6adba16e950b161eae73ef4ccb14", "fullName": "tests.test_shop#test_products_group", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "DESKTOP-NDLNMNH"}, {"name": "thread", "value": "18232-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shop"}]}